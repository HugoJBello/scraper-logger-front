{"version":3,"sources":["redux/actions/index.js","components/AppNavbar.jsx","components/services/executionService.js","components/ScrapingExecutions.jsx","components/services/summariesService.js","components/ScrapingSummaries.jsx","components/Home.jsx","components/Roots.jsx","redux/reducers/scraperSummary.js","redux/reducers/executionId.js","redux/reducers/dbName.js","redux/reducers/index.js","App.js","serviceWorker.js","index.js"],"names":["updateExecutionId","newExecutionId","type","payload","executionId","getExecutionId","AppNavbar","props","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getSelectedScrapingId","scrapingId","state","react_default","a","createElement","className","Link","to","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","React","Component","mapActionsToProps","onUpdateExecutionId","onGetExecutionId","connect","ownProps","getExecutions","dbName","limit","skip","order","url","concat","axios","get","then","response","data","ScrapingExecutions","changeDbName","event","setState","selectedDb","target","value","priceFormatter","cell","row","enumObject","index","date","Date","getTime","isActive","maxDateDiff","index_es","icon","executionTable","scope","retrievedExec","map","execution","key","onClick","selectScrapingId","name","lastNmun","lastPart","getActiveIcon","console","log","parseInt","dbNames","self","setInterval","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","sent","_this2","stop","class","for","onChange","getSummaries","ScrapingSummaries","Home","Roots","Route","path","component","scraperSummary","arguments","length","undefined","action","scraper","combineReducers","library","add","faStroopwafel","store","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","App","es","BrowserRouter","components_AppNavbar","components_Roots","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a4a330c7.chunk.js","sourcesContent":["export const UPDATE_SCRAPING_SUMMARY = \"scraper:updateScraperSummary\";\nexport const GET_SCRAPER_SUMMARY = \"scraper:getScraperSummary\";\n\nexport const UPDATE_EXECUTION_ID = \"scraper:updateExecutionId\";\nexport const GET_EXECUTION_ID = \"scraper:getExecutionId\";\n\nexport const UPDATE_DBNAME = \"scraper:updateDbName\";\nexport const GET_DBNAME = \"scraper:getDbName\";\n\nexport const updateScraperSummary = newScraperSummary => ({\n    type: UPDATE_SCRAPING_SUMMARY,\n    payload: {\n        scraper: newScraperSummary\n    }\n})\n\nexport const updateExecutionId = newExecutionId => ({\n    type: UPDATE_EXECUTION_ID,\n    payload: {\n        executionId: newExecutionId\n    }\n})\n\nexport const updateDbName = newDbName => ({\n    type: UPDATE_DBNAME,\n    payload: {\n        dbName: newDbName\n    }\n})\n\nexport const getScraper = () => ({\n    type: GET_SCRAPER_SUMMARY,\n})\n\nexport const getExecutionId = () => ({\n    type: GET_EXECUTION_ID,\n})\n\nexport const getDbName = () => ({\n    type: GET_DBNAME,\n})\n","import React from 'react';\nimport PropTypes from 'prop-types'\n\nimport { Link } from \"react-router-dom\";\nimport { connect } from 'react-redux';\nimport { updateExecutionId, getExecutionId } from '../redux/actions';\n\nclass AppNavbar extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {};\n    }\n    render() {\n        return (\n            <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n                <Link className=\"navbar-brand\" to=\"/\">App</Link>\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <ul className=\"navbar-nav mr-auto\">\n                        <li className=\"nav-item active\">\n                            <Link className=\"nav-link\" to=\"/home\">Home</Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link className=\"nav-link\" to=\"/scraping-executions\">Executions</Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link className=\"nav-link\" to=\"/scraping-summaries\">Scraping summaries</Link>\n                        </li>\n                    </ul>\n                    {this.props.executionId != \"\" &&\n                        <div className=\"nav-item my-sm-0\">\n                            <div className=\"nav-link\" >{this.getSelectedScrapingId()}</div>\n                        </div>\n                    }\n                </div>\n            </nav>\n        )\n    }\n    getSelectedScrapingId = () => {\n        if(this.props.executionId){\n            return this.props.executionId.scrapingId\n        } else {\n            return \"\"\n        }\n    }\n}\n\nAppNavbar.propTypes = {\n    executionId: PropTypes.string.isRequired\n}\n\n\nconst mapStateToProps = (state, ownProps) => ({\n    executionId: state.executionId\n});\n\nconst mapActionsToProps = {\n    onUpdateExecutionId: updateExecutionId,\n    onGetExecutionId: getExecutionId,\n};\n\nexport default connect(mapStateToProps, mapActionsToProps)(AppNavbar);\n","import axios from 'axios';\r\n\r\nconst BASE_URL = 'http://hbello.info:3001';\r\n\r\nconst dbExecutionFotocasa = \"state-execution-airbnb-scraping\"\r\n\r\nexport { getExecutions, getExecution };\r\n\r\nconst getExecution = (entryName) => {\r\n    //const url = `${BASE_URL}/entries/entry/name=${entryName}`;\r\n    //axios.defaults.headers.common['Authorization'] = localStorage.getItem('jwtToken');\r\n    //return axios.get(url).then(response => response.data);\r\n}\r\n\r\n// /stateExecution/state-execution-airbnb-scraping?skip=0&limit=2\r\nconst getExecutions = (dbName, limit, skip, order) => {\r\n    const url = `${BASE_URL}/stateExecution/${dbName}?skip=${skip}&limit=${limit}&order=${order}`;\r\n    //axios.defaults.headers.common['Authorization'] = localStorage.getItem('jwtToken');\r\n    return axios.get(url).then(response => response.data);\r\n}\r\n","import React, { Component } from 'react';\nimport { getExecutions } from './services/executionService';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport './scrapingResults.css';\nimport { connect } from 'react-redux';\nimport { updateExecutionId, getExecutionId } from '../redux/actions';\n\nclass ScrapingExecutions extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedDb : \"state-execution-fotocasa-scraping\",\n            dbNames: [\"state-execution-fotocasa-scraping\",\"state-execution-airbnb-scraping\"],\n            //dbName: \"state-execution-airbnb-scraping\",\n            limit: 100,\n            skip: 0,\n            order: -1,\n            maxDateDiff: 1000 * 60 * 20,\n            retrievedExec: []\n        }\n    }\n\n    async componentDidMount() {\n        const self = this;\n        setInterval(async () => {\n            const retrievedExec = await getExecutions(self.state.selectedDb, self.state.limit, self.state.skip, self.state.order);\n            this.setState({ retrievedExec })\n            //this.onUpdateExecutionId(retrievedExec[0]);\n            console.log(self.state);\n        }, 1000);\n\n    }\n\n    render() {\n        return (<div>\n                    <br/>\n                    <h2>Scraping executions</h2>\n                    <div class=\"row\">\n                    <div class=\"form-inline col-sm-6 col-lg-3\">\n                        <label for=\"sel1\">Select database:</label>\n                        <select class=\"form-control\" id=\"sel1\" onChange={this.changeDbName}>\n                            {this.state.dbNames.map( (dbName) => <option value={dbName}>{dbName}</option>)}\n                        </select>\n                    </div>\n                    </div>\n                    \n                    <br/>\n                    {this.executionTable()}\n                </div>);\n    }\n    changeDbName = (event) => {\n        this.setState({selectedDb:event.target.value});\n    }\n\n    priceFormatter = (cell, row, enumObject, index) => {\n        const date = (new Date(cell)).getTime();\n        const dateNow = (new Date()).getTime();\n        const dateDiff = dateNow - date\n        const isActive = dateDiff < this.state.maxDateDiff;\n        return (<div>{isActive && <FontAwesomeIcon icon=\"stroopwafel\"></FontAwesomeIcon>}</div>);\n    }\n    executionTable = () => {\n        return (<div className=\"\">\n        <table className=\"table table-striped\">\n            <thead>\n                <tr>\n                <th scope=\"col\">id</th>\n                <th scope=\"col\">date</th>\n                <th scope=\"col\">last city</th>\n                <th scope=\"col\">last piece</th>\n                <th scope=\"col\">state</th>\n                </tr>\n            </thead>\n            <tbody>\n                {this.state.retrievedExec.map((execution, index) => \n                    <tr key={index}>\n                    <td scope=\"row\"> <a onClick={this.selectScrapingId} name={index}>{execution.scrapingId}</a></td>\n                    <td className=\"big-cell\">{execution.date}</td>\n                    <td>{execution.lastNmun}</td>\n                    <td>{execution.lastPart}</td>\n                    <td>{this.getActiveIcon(execution)}</td>\n                    </tr>\n                )}\n                \n            </tbody>\n        </table>\n        </div>);\n    }\n\n\n    selectScrapingId = (event) => {\n        console.log(event.target.name);\n        const execution = this.state.retrievedExec[parseInt(event.target.name)];\n        this.onUpdateExecutionId(execution);\n    }\n\n    getActiveIcon = (execution) =>{\n        const date = (new Date(execution.date)).getTime();\n        const dateNow = (new Date()).getTime();\n        const dateDiff = dateNow - date\n        const isActive = dateDiff < this.state.maxDateDiff;\n        return (<div>{isActive && <FontAwesomeIcon icon=\"stroopwafel\"></FontAwesomeIcon>}</div>);\n    }\n\n    onUpdateExecutionId = (execution) => {\n        this.props.onUpdateExecutionId(execution);\n    }\n\n}\n\nconst mapStateToProps = state => ({\n    scrapingId: state.scrapingId\n});\n\nconst mapActionsToProps = {\n    onUpdateExecutionId: updateExecutionId,\n    onGetExecutionId: getExecutionId,\n};\n\nexport default connect(mapStateToProps, mapActionsToProps)(ScrapingExecutions);\n","import axios from 'axios';\r\n\r\nconst BASE_URL = 'http://hbello.info:3001';\r\n\r\nconst dbSummariesFotocasa = \"summaries-fotocasa-scraping\"\r\n\r\nexport { getSummaries, getSummary };\r\n\r\nconst getSummary = (entryName) => {\r\n    //const url = `${BASE_URL}/entries/entry/name=${entryName}`;\r\n    //axios.defaults.headers.common['Authorization'] = localStorage.getItem('jwtToken');\r\n    //return axios.get(url).then(response => response.data);\r\n}\r\n\r\n///summaries/summaries-fotocasa-scraping/skip=0&limit=2\r\nconst getSummaries = (dbName, limit, skip) => {\r\n    const url = `${BASE_URL}/summaries/${dbName}?skip=${skip}&limit=${limit}`;\r\n    //axios.defaults.headers.common['Authorization'] = localStorage.getItem('jwtToken');\r\n    return axios.get(url).then(response => response.data);\r\n}\r\n","import React, { Component } from 'react';\nimport { getSummaries } from './services/summariesService';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nimport { connect } from 'react-redux';\nimport { updateExecutionId, getExecutionId } from '../redux/actions';\n\n \nclass ScrapingSummaries extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dbName: \"summaries-fotocasa-scraping\",\n            limit: 1,\n            skip: 0,\n            order: -1,\n            maxDateDiff: 1000 * 60 * 20,\n            retrievedExec: null\n        }\n    }\n\n    async componentDidMount() {\n        const retrievedExec = await getSummaries(this.state.dbName, this.state.limit, this.state.skip, this.state.order);\n        this.setState({ retrievedExec })\n        console.log(this.state);\n    }\n\n\n    render() {\n        return (<div>Scraping summaries</div>);\n    }\n}\n\nconst mapStateToProps = state => ({\n    scrapingId: state.scrapingId\n});\n\nconst mapActionsToProps = {\n    onUpdateExecutionId: updateExecutionId,\n    onGetExecutionId: getExecutionId,\n};\n\nexport default connect(mapStateToProps, mapActionsToProps)(ScrapingSummaries);\n","import React, { Component } from 'react';\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {}\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\nimport ScrapingExecutions from './ScrapingExecutions'\nimport ScrapingSummaries from './ScrapingSummaries'\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Home from './Home';\n\nclass Roots extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n    render() {\n        return (\n            <div className=\"container\">\n                <Route path=\"/scraping-executions\" component={ScrapingExecutions} />\n                <Route path=\"/home\" component={Home} />\n                <Route path=\"/scraping-summaries\" component={ScrapingSummaries} />\n            </div>);\n    }\n}\n\nexport default Roots;","import { UPDATE_SCRAPING_SUMMARY, GET_SCRAPER_SUMMARY } from '../actions'\n\nconst scraperSummary = (state = \"\", action) => {\n    switch (action.type) {\n        case UPDATE_SCRAPING_SUMMARY:\n            return action.payload.scraper;\n        case GET_SCRAPER_SUMMARY:\n            return state;\n        default:\n            return state;\n    }\n}\nexport default scraperSummary\n","import { UPDATE_EXECUTION_ID, GET_EXECUTION_ID } from '../actions'\n\nconst scraperSummary = (state = {}, action) => {\n    switch (action.type) {\n        case UPDATE_EXECUTION_ID:\n            return action.payload.executionId;\n        case GET_EXECUTION_ID:\n            return state;\n        default:\n            return state;\n    }\n}\nexport default scraperSummary\n","import { UPDATE_DBNAME, GET_DBNAME } from '../actions'\n\nconst dbName = (state = \"summaries-fotocasa-scraping\", action) => {\n    switch (action.type) {\n        case UPDATE_DBNAME:\n            return action.payload.dbName;\n        case GET_DBNAME:\n            return state;\n        default:\n            return state;\n    }\n}\nexport default dbName\n","import { combineReducers } from 'redux';\nimport scraperSummary from './scraperSummary';\nimport executionId from './executionId';\nimport dbName from './dbName';\nexport default combineReducers({\n    scraperSummary, executionId, dbName\n});\n","import React, { Component } from 'react';\nimport AppNavbar from './components/AppNavbar';\nimport Roots from './components/Roots';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport './App.css';\n\nimport { Provider } from 'react-redux'\nimport rootReducer from './redux/reducers'\nimport { createStore } from 'redux'\n\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faStroopwafel } from '@fortawesome/free-solid-svg-icons'\nlibrary.add(faStroopwafel)\n\nconst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <Router>\n            <div>\n              <AppNavbar></AppNavbar>\n              <Roots></Roots>\n            </div>\n          </Router>\n        </div>\n      </Provider>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\nimport 'react-bootstrap-table/dist/react-bootstrap-table-all.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}